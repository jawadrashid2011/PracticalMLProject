print(calculatedTime)
print(rPartScaledModel$finalModel)
plot(rPartScaledModel$finalModel, uniform=TRUE, main="Classification Tree")
text(rPartScaledModel$finalModel, use.n = TRUE, all=TRUE, cex=0.8)
fancyRpartPlot(rPartScaledModel$finalModel)
rPartScaledPredictions <- predict(rPartScaledModel, testingAfterProcess)
rpartScaledStats <- confusionMatrix(testing$classe, rPartScaledPredictions)
summary(rPartSimpleModel)
print(rPartSimpleModel)
print(rPartScaledModel)
rpartScaledStats
rpartSimpleStats
save.image("Updated.RData")
print(rPartScaledModel$finalModel)
print(rPartScaledModel$)
rPartScaledModel$finalModel
rPartScaledModel
trCtrlRepeated <- trainControl(method = "repeatedcv", repeats=5)
ptm <- proc.time()
set.seed(100)
rPartScaledRepeatedCVModel <- train(training$classe ~ ., data=trainingAfterProcess, method="rpart", trControl=trCtrlRepeated)
calculatedTimeRepeatedCV <- proc.time() - ptm
print(calculatedTimeRepeatedCV)
print(rPartScaledRepeatedCVModel$finalModel)
plot(rPartScaledRepeatedCVModel$finalModel, uniform=TRUE, main="Classification Tree")
text(rPartScaledRepeatedCVModel$finalModel, use.n = TRUE, all=TRUE, cex=0.8)
fancyRpartPlot(rPartScaledRepeatedCVModel$finalModel)
rPartScaledRepeatedCVPredictions <- predict(rPartScaledRepeatedCVModel, testingAfterProcess)
rpartScaledRepeatedCVStats <- confusionMatrix(testing$classe, rPartScaledRepeatedCVPredictions)
rpartScaledRepeatedCVStats
prPCA <- prcomp(training[,-55], center=TRUE, scale=TRUE)
print(prPCA)
plot(prPCA, type = "l")
summary(prPCA)
sum(summary(logPca)$importance[2,][1:7])
sum(summary(prPCA)$importance[2,][1:7])
sum(summary(prPCA)$importance[2,][1:20])
sum(summary(prPCA)$importance[2,][1:30])
trainingPreProcPCA <- preProcess(training[,-55],
method=c("BoxCox", "center",
"scale", "pca"), pcaComp=30)
trainingAfterProcessPCA <- predict(trainingPreProcPCA, training[,-55])
testingAfterProcessPCA <- predict(trainingPreProcPCA, testing[,-55])
trCtrlRepeatedPCA <- trainControl(method = "repeatedcv", repeats=5)
ptm <- proc.time()
set.seed(100)
rPartScaledRepeatedCVPCAModel <- train(training$classe ~ ., data=trainingAfterProcessPCA, method="rpart", trControl=trCtrlRepeatedPCA)
calculatedTimeRepeatedCVPCA <- proc.time() - ptm
print(calculatedTimeRepeatedCVPCA)
print(rPartScaledRepeatedCVPCAModel$finalModel)
plot(rPartScaledRepeatedCVPCAModel$finalModel, uniform=TRUE, main="Classification Tree")
text(rPartScaledRepeatedCVPCAModel$finalModel, use.n = TRUE, all=TRUE, cex=0.8)
fancyRpartPlot(rPartScaledRepeatedCVPCAModel$finalModel)
rPartScaledRepeatedCVPredictionsPCA <- predict(rPartScaledRepeatedCVPCAModel, testingAfterProcessPCA)
rpartScaledRepeatedCVStats <- confusionMatrix(testing$classe, rPartScaledRepeatedCVPredictionsPCA)
rpartScaledRepeatedCVStats <- confusionMatrix(testing$classe, rPartScaledRepeatedCVPredictions)
rpartScaledRepeatedCVStatsPCA <- confusionMatrix(testing$classe, rPartScaledRepeatedCVPredictionsPCA)
rpartScaledRepeatedCVStatsPCA
sum(summary(prPCA)$importance[2,][1:40])
trainingPreProcPCA <- preProcess(training[,-55],
method=c("BoxCox", "center",
"scale", "pca"), pcaComp=40)
trainingAfterProcessPCA <- predict(trainingPreProcPCA, training[,-55])
testingAfterProcessPCA <- predict(trainingPreProcPCA, testing[,-55])
trCtrlRepeatedPCA <- trainControl(method = "repeatedcv", repeats=5)
ptm <- proc.time()
set.seed(100)
rPartScaledRepeatedCVPCAModel <- train(training$classe ~ ., data=trainingAfterProcessPCA, method="rpart", trControl=trCtrlRepeatedPCA)
calculatedTimeRepeatedCVPCA <- proc.time() - ptm
print(calculatedTimeRepeatedCVPCA)
rPartScaledRepeatedCVPredictionsPCA <- predict(rPartScaledRepeatedCVPCAModel, testingAfterProcessPCA)
rpartScaledRepeatedCVStatsPCA <- confusionMatrix(testing$classe, rPartScaledRepeatedCVPredictionsPCA)
rpartScaledRepeatedCVStatsPCA
save.image("Updated.RData")
ptm <- proc.time()
set.seed(1000)
earthBaggedModel <- train(training$classe ~ ., data=trainingAfterProcess, method="bagEarth", trControl=trCtrlRepeated)
ptm <- proc.time()
set.seed(1000)
earthBaggedModel <- train(training$classe ~ ., data=trainingAfterProcess, method="treebag", trControl=trCtrlRepeated)
ptm <- proc.time()
set.seed(1000)
earthBaggedModel <- train(training$classe ~ ., data=trainingAfterProcess, method="treebag", trControl=trCtrlRepeated)
ptm <- proc.time()
set.seed(1000)
earthBaggedModel <- train(training$classe ~ ., data=trainingAfterProcess, method="treebag")
library(randomForest)
save.image("Before Random Forest.RData")
summary(trainingAfterProcess$classe)
summary(training$classe)
simpleOutput <- rep("A", nrow(testingAfterProcess))
baseOutput <- rep("A", nrow(testingAfterProcess))
baseConfusion <- confusionMatrix(testing$classe, baseOutput)
baseOutput <- as.factor(baseOutput)
baseConfusion <- confusionMatrix(testing$classe, baseOutput)
baseOutput <- factor(rep("A", nrow(testingAfterProcess)), levels=c("A","B","C","D",E))
baseOutput <- factor(rep("A", nrow(testingAfterProcess)), levels=c("A","B","C","D","E"))
baseConfusion <- confusionMatrix(testing$classe, baseOutput)
print(baseConfusion)
save.image("Updated.RData")
ptm <- proc.time()
randomForestTrCtrl <- trainControl(method = "cv", number=3)
set.seed(1000)
randomForestModel <- train(training$classe ~ ., data=trainingAfterProcess, method="rf", trControl=randomForestTrCtrl)
calcluatedRFTime <- proc.time() - ptm
print(calcluatedRFTime)
print(randomForestModel$finalModel)
plot(rPartScarandomForestModelledRepeatedCVPCAModel$finalModel, uniform=TRUE, main="Classification Tree")
plot(randomForestModel$finalModel, uniform=TRUE, main="Classification Tree")
randomForestModelPrediction <- predict(randomForestModel, testingAfterProcess)
warnings()
randomForestModelPrediction <- predict(randomForestModel, testingAfterProcess)
randomForestModelPredictionConfusion <- confusionMatrix(testing$classe, randomForestModelPrediction)
print(randomForestModelPredictionConfusion)
save.image("Updated.RData")
confusionMatrix(training$classe, predict(randomForestModel, trainingAfterProcess))
save.image("Updated.RData")
ptm <- proc.time()
gbmTrCtrl <- trainControl(method = "cv", number=3)
set.seed(10000)
gbmModel <- train(training$classe ~ ., data=trainingAfterProcess, method="gbm", trControl=gbmTrCtrl)
print(gbmTime)
print(gbmTime)
gbmTime <- proc.time() - ptm
print(gbmTime)
print(gbmModel$finalModel)
gbmModelPrediction <- predict(gbmModel, testingAfterProcess)
gbmConfusion <- confusionMatrix(testing$classe, gbmModelPrediction)
print(gbmConfusion)
print(confusionMatrix(training$classe, predict(gbmModel, trainingAfterProcess)))
print(gbmConfusion)
anova(gbmModel, randomForestModel)
print(gbmConfusion)
print(randomForestModelPredictionConfusion)
save.image("Updated.RData")
casesFMData <- predict(trainingPreProc, cases[,-55])
casesFMData <- predict(trainingPreProc, cases[,-55])
casesFMPrediction <- predict(randomForestModel, casesFMData)
print(casesFMPrediction)
casesGBMData <- predict(trainingPreProc, cases[,-55])
casesGBMPrediction <- predict(gbmModel, casesGBMData)
print(casesGBMPrediction)
cases
casesGBMData
head(casesGBMData)
View(cases)
cases <- read.csv("pml-testing.csv")
View(cases)
View(allData)
allData$classe
cases$classe
diff(names(allData), names(cases))
setdiff(names(allData), names(cases))
setdiff(names(cases),(names(allData))
setdiff(names(cases),names(allData))
View(cases)
cases$problem_id
head(cases,1)
cases <- cases[, -removeCols]
head(cases,1)
cases[-55]
cases[,-55]
cases[,55]
print(casesFMPrediction)
print(casesGBMPrediction)
print(gbmModelPrediction
)
casesGBMData
casesGBMPrediction
casesFMPrediction
print(predict(rPartScaledRepeatedCVModel, casesGBMData))
pml_write_files(casesGBMPrediction)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=paste("predictions",filename,sep = "/"),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(casesGBMPrediction)
View(cases)
print(predict(rPartSimpleModel, cases[, -55]))
casesGBMData
View(casesGBMData)
cases[,-55]
View(cases)
names(allData[2:6])
set.seed(1)
newData <- allData[, -allNAs]
inTrain <- createDataPartition(y = newData$classe, p=0.75, list=FALSE)
set.seed(1)
inTrain <- createDataPartition(y = filteredData$classe, p=0.75, list=FALSE)
training <- filteredData[inTrain, ]
testing <- filteredData[-inTrain, ]
newData <- allData[, -allNAs]
inTrainNew <- createDataPartition(y = newData$classe, p=0.75, list=FALSE)
trainingNew <- newData[inTrainNew, ]
testingNew <- newData[-inTrainNew, ]
print(testingNew)
trainingPreProcNew <- preProcess(trainingNew[,-55],
method=c("BoxCox", "center",
"scale"))
names(trainingNew)
set.seed(1)
newData <- allData[, union(-allNAs, 5)]
newData <- allData[, -union(allNAs, 5)]
inTrainNew <- createDataPartition(y = newData$classe, p=0.75, list=FALSE)
trainingNew <- newData[inTrainNew, ]
testingNew <- newData[-inTrainNew, ]
names(trainingNew)
trainingPreProcNew <- preProcess(trainingNew[,-c(2,55)],
method=c("BoxCox", "center",
"scale"))
table(allData$raw_timestamp_part_1)
table(class$raw_timestamp_part_1)
names(allData[2:6])
names(allData[1:6])
set.seed(1)
newData <- allData[, -union(allNAs, c(3,4,5)]
newData <- allData[, -union(allNAs, c(3,4,5))]
inTrainNew <- createDataPartition(y = newData$classe, p=0.75, list=FALSE)
trainingNew <- newData[inTrainNew, ]
testingNew <- newData[-inTrainNew, ]
ndim(trainingNew)
dim(trainingNew)
names(trainingNew[,c(2,57)])
trainingPreProcNew <- preProcess(trainingNew[,-c(2,57)],
method=c("BoxCox", "center",
"scale"))
names(trainingNew[,-c(2,57)])
names(trainingNew[,-c(2,3,57))
names(trainingNew[,-c(2,3,57)]
)
names(trainingNew[,c(2,3,57)])
names(trainingNew[,c(2,4,57)])
trainingPreProcNew <- preProcess(trainingNew[,-c(2,4,57)],
method=c("BoxCox", "center",
"scale"))
sapply(trainingNew, FUN = class)
names(trainingNew[,c(2,4,57)])
sapply(trainingNew[,-c(2,3,57)], FUN = class)
trainingPreProcNew <- preProcess(trainingNew[,-c(2,3,57)],
method=c("BoxCox", "center",
"scale"))
trainingAfterProcessNew <- predict(trainingPreProcNew, trainingNew[,-c(2,3,57)])
testingAfterProcessNew <- predict(trainingPreProcNew, testingNew[,-c(2,3,57)])
trainingAfterProcessNew$user_name <- trainingNew$user_name
trainingAfterProcessNew$new_window <- trainingNew$new_window
testingAfterProcessNew$user_name <- testingAfterProcessNew$user_name
testingAfterProcessNew$new_window <- testingAfterProcessNew$new_window
dim(trainingAfterProcessNew)
ptm <- proc.time()
gbmTrCtrlNew <- trainControl(method = "cv", number=3)
set.seed(10000)
gbmModelNew <- train(trainingNew$classe ~ ., data=trainingAfterProcessNew, method="gbm", trControl=gbmTrCtrlNew)
gbmTimeNew <- proc.time() - ptm
print(gbmTimeNew)
print(gbmModelNew$finalModel)
gbmModelPredictionNew <- predict(gbmModelNew, testingAfterProcessNew)
testingAfterProcessNew$user_name
testingAfterProcessNew$user_name <- testingAfterProcessNew$user_name
testingAfterProcessNew$user_name <- testingNew$user_name
testingAfterProcessNew$new_window <- testingNew$new_window
gbmModelPredictionNew <- predict(gbmModelNew, testingAfterProcessNew)
gbmConfusionNew <- confusionMatrix(testingNew$classe, gbmModelPredictionNew)
print(gbmConfusionNew)
print(confusionMatrix(trainingNew$classe, predict(gbmModelNew, trainingAfterProcessNew)))
ptm <- proc.time()
gbmTrCtrlNew <- trainControl(method = "cv", number=3)
set.seed(10000)
gbmModelNew <- train(trainingNew$classe ~ ., data=trainingNew, method="gbm")
varImp(training)
varImp(randomForestModel)
source('~/Documents/Coursera/Practical Machine Learning/Project/Code.R')
save.image("Updated.RData")
library(caret)
library(kernlab)
allData <- read.csv("pml-training.csv")
cases <- read.csv("pml-testing.csv")
allNAs <- which(sapply(cases, function(x) all(is.na(x))))
head(cases[,1:6])
removeCols <- union(allNAs, c(1:5))
cases <- cases[, -removeCols]
filteredData <- allData[, -removeCols]
head(cases,1)
cases <- read.csv("pml-testing.csv")
cases <- cases[, -union(removeCols,ncol(cases))]
head(cases,1)
filteredData <- allData[, -removeCols]
inTrain <- createDataPartition(y = filteredData$classe, p=0.75, list=FALSE)
training <- filteredData[inTrain, ]
testing <- filteredData[-inTrain, ]
set.seed(2)
baseOutput <- factor(rep("A", nrow(testingAfterProcess)), levels=c("A","B","C","D","E"))
baseOutput <- factor(rep("A", nrow(tesing)), levels=c("A","B","C","D","E"))
baseOutput <- factor(rep("A", nrow(testing)), levels=c("A","B","C","D","E"))
baseConfusion <- confusionMatrix(testing$classe, baseOutput)
print(baseConfusion)
baseOutput <- factor(rep("A", nrow(testing)), levels=c("A","B","C","D","E"))
baseTraining <- factor(rep("A", nrow(training)), levels=c("A","B","C","D","E"))
baseTrainConfusion <- confusionMatrix(training$classe, baseTraining)
baseConfusion <- confusionMatrix(testing$classe, baseOutput)
print(baseTrainConfusion)
print(baseConfusion)
library(rattle)
library(rpart)
library(randomforest)
library(gbm)
library(randomForest)
ptm <- proc.time()
rPartSimpleModel <- train(classe ~ ., data=training, method="rpart")
rPartSimpleTime <- proc.time() - ptm
print(rPartSimpleTime)
print(rPartSimpleModel$finalModel)
plot(rPartSimpleModel$finalModel, uniform=TRUE, main="Classification Tree")
text(rPartSimpleModel$finalModel, use.n = TRUE, all=TRUE, cex=0.8)
fancyRpartPlot(rPartSimpleModel$finalModel)
fancyRpartPlot(rPartSimpleModel$finalModel)
rPartSimpleTrain <- predict(rPartSimpleModel, newdata=training)
rPartSimpleTest <- predict(rPartSimpleModel, newdata=testing)
rPartSimpleTrainConfusion <- confusionMatrix(training$classe, rPartSimpleTrain)
rPartSimpleTestConfusion <- confusionMatrix(testing$classe, rPartSimpleTest)
print(rPartSimpleTrainConfusion)
print(rPartSimpleTestConfusion)
print(predict(rPartSimpleModel, cases))
pml_write_files(c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B","B"))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=paste("predictions",filename,sep = "/"),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
dim(c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B","B"))
length(c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B","B"))
pml_write_files(c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B"))
table(actualAnswer, predict(rPartSimpleModel, cases))
actualAnswer <- c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B")
table(actualAnswer, predict(rPartSimpleModel, cases))
confusionMatrix(actualAnswer, predict(rPartSimpleModel, cases))
print(confusionMatrix(actualAnswer, factor(rep("A", nrow(cases)), levels=c("A","B","C","D","E"))))
print(rPartSimpleTrainConfusion)
print(rPartSimpleTestConfusion)
confusionMatrix(actualAnswer, predict(rPartSimpleModel, cases))
print(confusionMatrix(actualAnswer, factor(rep("A", nrow(cases)), levels=c("A","B","C","D","E"))))
print(rPartSimpleTrainConfusionCV)
ptm <- proc.time()
rPartSimpleModelCV <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"))
set.seed(3)
ptm <- proc.time()
rPartSimpleModel <- train(classe ~ ., data=training, method="rpart")
rPartSimpleTime <- proc.time() - ptm
print(rPartSimpleTime)
print(rPartSimpleModel$finalModel)
fancyRpartPlot(rPartSimpleModel$finalModel)
rPartSimpleTrain <- predict(rPartSimpleModel, newdata=training)
rPartSimpleTest <- predict(rPartSimpleModel, newdata=testing)
rPartSimpleTrainConfusion <- confusionMatrix(training$classe, rPartSimpleTrain)
rPartSimpleTestConfusion <- confusionMatrix(testing$classe, rPartSimpleTest)
print(rPartSimpleTrainConfusion)
print(rPartSimpleTestConfusion)
confusionMatrix(actualAnswer, predict(rPartSimpleModel, cases))
casesConfusionSimplerPart <- confusionMatrix(actualAnswer, predict(rPartSimpleModel, cases))
print(casesConfusionSimplerPart)
set.seed(4)
ptm <- proc.time()
rPartSimpleModelCV <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"))
rPartSimpleTimeCV <- proc.time() - ptm
print(rPartSimpleTimeCV)
print(rPartSimpleModelCV$finalModel)
fancyRpartPlot(rPartSimpleModelCV$finalModel)
rPartSimpleTrainCV <- predict(rPartSimpleModelCV, newdata=training)
rPartSimpleTestCV <- predict(rPartSimpleModelCV, newdata=testing)
rPartSimpleTrainConfusionCV <- confusionMatrix(training$classe, rPartSimpleTrainCV)
rPartSimpleTestConfusionCV <- confusionMatrix(testing$classe, rPartSimpleTestCV)
print(rPartSimpleTrainConfusionCV)
print(rPartSimpleModelCV$finalModel)
fancyRpartPlot(rPartSimpleModelCV$finalModel)
rPartSimpleTrainCV <- predict(rPartSimpleModelCV, newdata=training)
rPartSimpleTestCV <- predict(rPartSimpleModelCV, newdata=testing)
rPartSimpleTrainConfusionCV <- confusionMatrix(training$classe, rPartSimpleTrainCV)
rPartSimpleTestConfusionCV <- confusionMatrix(testing$classe, rPartSimpleTestCV)
print(rPartSimpleTrainConfusionCV)
print(rPartSimpleTestConfusionCV)
casesConfusionSimplerPartCV <- confusionMatrix(actualAnswer, predict(rPartSimpleModelCV, cases))
print(casesConfusionSimplerPartCV)
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="repeatedcv", repeats = 5, number = 10), preProcess = ("BoxCox", "center", "scale"))
rPartSimpleTimeRCVScaled <- proc.time() - ptm
print(rPartSimpleTimeRCVScaled)
print(rPartSimpleModelRCVScaled$finalModel)
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="repeatedcv", repeats = 5, number = 10), preProcess = ("BoxCox", "center", "scale"))
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="repeatedcv", repeats = 5, number = 10), preProcess = ("BoxCox", "center", "scale"))
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="repeatedcv", repeats = 5, number = 10), preProcess = c("BoxCox", "center", "scale"))
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="repeatedcv", repeats = 5, number = 10), preProcess = c("BoxCox", "center", "scale"))
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"), preProcess = c("BoxCox", "center", "scale"))
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"), preProcess = c("BoxCox", "center", "scale"))
set.seed(4)
ptm <- proc.time()
rPartSimpleModelCV <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"))
rPartSimpleTimeCV <- proc.time() - ptm
print(rPartSimpleTimeCV)
qplot(training$new_window)
hist(training$new_window)
hist(training$num_window)
hist(log(training$num_wind))
hist(training$roll_belt)
save.image()
hist(log(training$roll_belt))
set.seed(5)
ptm <- proc.time()
rPartSimpleModelRCVScaled <- train(classe ~ ., data=training, method="rpart", trControl=trainControl(method="cv"), preProcess = c("BoxCox", "center", "scale"))
trainingPreProc <- preProcess(training[,-ncol(training)],
method=c("BoxCox", "center",
"scale"))
names(training[,-ncol(training))
ncol(training)
training[,-55]
head(training[,-55])
ndim(training[,-55])
dim(training[,-55])
dim(training[,-ncol(training)])
trainingPreProc <- preProcess(training[,-ncol(training)],
method=c("BoxCox", "center",
"scale"))
names(training)
trainingPreProc <- preProcess(training[,-c(1,ncol(training))],
method=c("BoxCox", "center",
"scale"))
trainingAfterProcess <- predict(trainingPreProc, training[,-c(1,ncol(training))])
testingAfterProcess <- predict(trainingPreProc, testing[,-c(1,ncol(testing))])
trainingAfterProcess$new_window = training$new_window
testingAfterProcess$new_window = testing$new_window
set.seed(5)
ptm <- proc.time()
trainingPreProc <- preProcess(training[,-c(1,ncol(training))],
method=c("BoxCox", "center",
"scale"))
trainingAfterProcess <- predict(trainingPreProc, training[,-c(1,ncol(training))])
testingAfterProcess <- predict(trainingPreProc, testing[,-c(1,ncol(testing))])
trainingAfterProcess$new_window = training$new_window
testingAfterProcess$new_window = testing$new_window
rPartSimpleModelRCVScaled <- train(training$classe ~ ., data=trainingAfterProcess, method="rpart", trControl=trainControl(method="cv"))
rPartSimpleTimeRCVScaled <- proc.time() - ptm
print(rPartSimpleTimeRCVScaled)
print(rPartSimpleModelRCVScaled$finalModel)
fancyRpartPlot(rPartSimpleModelRCVScaled$finalModel)
rPartSimpleTrainRCVScaled <- predict(rPartSimpleModelRCVScaled, newdata=trainingAfterProcess)
rPartSimpleTestRCVScaled <- predict(rPartSimpleModelRCVScaled, newdata=testingAfterProcess)
rPartSimpleTrainConfusionRCVScaled <- confusionMatrix(training$classe, rPartSimpleTrainRCVScaled)
rPartSimpleTestConfusionRCVScaled <- confusionMatrix(testing$classe, rPartSimpleTestRCVScaled)
print(rPartSimpleTrainConfusionRCVScaled)
print(rPartSimpleTestConfusionRCVScaled)
casesScaled <- predict(trainingPreProc, cases[,-c(1)])
casesScaled$new_window = cases$new_window
casesConfusionSimplerPartRCVScaled <- confusionMatrix(actualAnswer, predict(rPartSimpleModelRCVScaled, casesScaled))
print(casesConfusionSimplerPartRCVScaled)
save.image()
set.seed(40)
ptm <- proc.time()
rfSimpleModel <- train(classe ~ ., data=training, method="rf", trControl=trainControl(method="cv"))
rfSimpleTime <- proc.time() - ptm
print(rfSimpleTime)
print(rfSimpleModel$finalModel)
rfSimpleTrainrf <- predict(rfSimpleModel, newdata=training)
rfSimpleTest <- predict(rfSimpleModel, newdata=testing)
rfSimpleTrainConfusion <- confusionMatrix(training$classe, rfSimpleTrain)
rfSimpleTrain <- predict(rfSimpleModel, newdata=training)
rfSimpleTest <- predict(rfSimpleModel, newdata=testing)
rfSimpleTrainConfusion <- confusionMatrix(training$classe, rfSimpleTrain)
rfSimpleTestConfusion <- confusionMatrix(testing$classe, rfSimpleTest)
print(rfSimpleTrainConfusion)
print(rfSimpleTestConfusion)
rfCasesConfusion <- confusionMatrix(actualAnswer, predict(rfSimpleModel, cases))
print(rfCasesConfusion)
print(rfSimpleTrainConfusion)
print(rfSimpleTestConfusion)
rfCasesConfusion <- confusionMatrix(actualAnswer, predict(rfSimpleModel, cases))
print(rfCasesConfusion)
rfCasesConfusion
predict(rfSimpleModel, cases)
actualAnswer
save.image()
varImp(rfSimpleModel)
set.seed(50)
ptm <- proc.time()
gbmSimpleModel <- train(classe ~ ., data=training, method="gbm", trControl=trainControl(method="cv"))
gbmSimpleTime <- proc.time() - ptm
print(gbmSimpleTime)
print(gbmSimpleModel$finalModel)
fancyRpartPlot(gbmSimpleModel$finalModel)
gbmSimpleTrain <- predict(gbmSimpleModel, newdata=training)
gbmSimpleTest <- predict(gbmSimpleModel, newdata=testing)
gbmSimpleTrainConfusion <- confusionMatrix(training$classe, gbmSimpleTrain)
gbmSimpleTestConfusion <- confusionMatrix(testing$classe, gbmSimpleTest)
print(gbmSimpleTrainConfusion)
print(gbmSimpleTestConfusion)
gbmCasesConfusion <- confusionMatrix(actualAnswer, predict(gbmSimpleModel, cases))
print(gbmCasesConfusion)
save.image()
load("~/Documents/Coursera/Practical Machine Learning/Project/.RData")
print(rfSimpleTime)
print(gbmSimpleTime)
